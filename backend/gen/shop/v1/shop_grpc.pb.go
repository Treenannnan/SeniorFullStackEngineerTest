// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: shop/v1/shop.proto

package shopv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopService_UploadAudiobook_FullMethodName    = "/shop.v1.ShopService/UploadAudiobook"
	ShopService_CreateUploadURL_FullMethodName    = "/shop.v1.ShopService/CreateUploadURL"
	ShopService_CompleteUpload_FullMethodName     = "/shop.v1.ShopService/CompleteUpload"
	ShopService_GetUploadURL_FullMethodName       = "/shop.v1.ShopService/GetUploadURL"
	ShopService_ListAudiobooks_FullMethodName     = "/shop.v1.ShopService/ListAudiobooks"
	ShopService_GetAudiobook_FullMethodName       = "/shop.v1.ShopService/GetAudiobook"
	ShopService_ViewCart_FullMethodName           = "/shop.v1.ShopService/ViewCart"
	ShopService_AddToCart_FullMethodName          = "/shop.v1.ShopService/AddToCart"
	ShopService_RemoveFromCart_FullMethodName     = "/shop.v1.ShopService/RemoveFromCart"
	ShopService_Checkout_FullMethodName           = "/shop.v1.ShopService/Checkout"
	ShopService_ListPurchases_FullMethodName      = "/shop.v1.ShopService/ListPurchases"
	ShopService_GetDownloadURL_FullMethodName     = "/shop.v1.ShopService/GetDownloadURL"
	ShopService_GetTranscript_FullMethodName      = "/shop.v1.ShopService/GetTranscript"
	ShopService_GetDescription_FullMethodName     = "/shop.v1.ShopService/GetDescription"
	ShopService_GetAudiobookStatus_FullMethodName = "/shop.v1.ShopService/GetAudiobookStatus"
)

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServiceClient interface {
	UploadAudiobook(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadChunk, UploadAudiobookResponse], error)
	CreateUploadURL(ctx context.Context, in *CreateUploadUrlRequest, opts ...grpc.CallOption) (*CreateUploadUrlResponse, error)
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*CreateUploadUrlResponse, error)
	ListAudiobooks(ctx context.Context, in *ListAudiobooksRequest, opts ...grpc.CallOption) (*ListAudiobooksResponse, error)
	GetAudiobook(ctx context.Context, in *GetAudiobookRequest, opts ...grpc.CallOption) (*GetAudiobookResponse, error)
	ViewCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ViewCartResponse, error)
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*ViewCartResponse, error)
	RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*ViewCartResponse, error)
	Checkout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckoutResponse, error)
	ListPurchases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPurchasesResponse, error)
	GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error)
	GetTranscript(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*GetTranscriptResponse, error)
	GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*GetDescriptionResponse, error)
	GetAudiobookStatus(ctx context.Context, in *GetAudiobookStatusRequest, opts ...grpc.CallOption) (*GetAudiobookStatusResponse, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) UploadAudiobook(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadChunk, UploadAudiobookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShopService_ServiceDesc.Streams[0], ShopService_UploadAudiobook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadChunk, UploadAudiobookResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShopService_UploadAudiobookClient = grpc.ClientStreamingClient[UploadChunk, UploadAudiobookResponse]

func (c *shopServiceClient) CreateUploadURL(ctx context.Context, in *CreateUploadUrlRequest, opts ...grpc.CallOption) (*CreateUploadUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadUrlResponse)
	err := c.cc.Invoke(ctx, ShopService_CreateUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, ShopService_CompleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*CreateUploadUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadUrlResponse)
	err := c.cc.Invoke(ctx, ShopService_GetUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ListAudiobooks(ctx context.Context, in *ListAudiobooksRequest, opts ...grpc.CallOption) (*ListAudiobooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAudiobooksResponse)
	err := c.cc.Invoke(ctx, ShopService_ListAudiobooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetAudiobook(ctx context.Context, in *GetAudiobookRequest, opts ...grpc.CallOption) (*GetAudiobookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAudiobookResponse)
	err := c.cc.Invoke(ctx, ShopService_GetAudiobook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ViewCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ViewCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewCartResponse)
	err := c.cc.Invoke(ctx, ShopService_ViewCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*ViewCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewCartResponse)
	err := c.cc.Invoke(ctx, ShopService_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*ViewCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewCartResponse)
	err := c.cc.Invoke(ctx, ShopService_RemoveFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) Checkout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckoutResponse)
	err := c.cc.Invoke(ctx, ShopService_Checkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ListPurchases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPurchasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPurchasesResponse)
	err := c.cc.Invoke(ctx, ShopService_ListPurchases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownloadURLResponse)
	err := c.cc.Invoke(ctx, ShopService_GetDownloadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetTranscript(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*GetTranscriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranscriptResponse)
	err := c.cc.Invoke(ctx, ShopService_GetTranscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*GetDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDescriptionResponse)
	err := c.cc.Invoke(ctx, ShopService_GetDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetAudiobookStatus(ctx context.Context, in *GetAudiobookStatusRequest, opts ...grpc.CallOption) (*GetAudiobookStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAudiobookStatusResponse)
	err := c.cc.Invoke(ctx, ShopService_GetAudiobookStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
// All implementations must embed UnimplementedShopServiceServer
// for forward compatibility.
type ShopServiceServer interface {
	UploadAudiobook(grpc.ClientStreamingServer[UploadChunk, UploadAudiobookResponse]) error
	CreateUploadURL(context.Context, *CreateUploadUrlRequest) (*CreateUploadUrlResponse, error)
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	GetUploadURL(context.Context, *GetUploadURLRequest) (*CreateUploadUrlResponse, error)
	ListAudiobooks(context.Context, *ListAudiobooksRequest) (*ListAudiobooksResponse, error)
	GetAudiobook(context.Context, *GetAudiobookRequest) (*GetAudiobookResponse, error)
	ViewCart(context.Context, *emptypb.Empty) (*ViewCartResponse, error)
	AddToCart(context.Context, *AddToCartRequest) (*ViewCartResponse, error)
	RemoveFromCart(context.Context, *RemoveFromCartRequest) (*ViewCartResponse, error)
	Checkout(context.Context, *emptypb.Empty) (*CheckoutResponse, error)
	ListPurchases(context.Context, *emptypb.Empty) (*ListPurchasesResponse, error)
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
	GetTranscript(context.Context, *GetTranscriptRequest) (*GetTranscriptResponse, error)
	GetDescription(context.Context, *GetDescriptionRequest) (*GetDescriptionResponse, error)
	GetAudiobookStatus(context.Context, *GetAudiobookStatusRequest) (*GetAudiobookStatusResponse, error)
	mustEmbedUnimplementedShopServiceServer()
}

// UnimplementedShopServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopServiceServer struct{}

func (UnimplementedShopServiceServer) UploadAudiobook(grpc.ClientStreamingServer[UploadChunk, UploadAudiobookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadAudiobook not implemented")
}
func (UnimplementedShopServiceServer) CreateUploadURL(context.Context, *CreateUploadUrlRequest) (*CreateUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadURL not implemented")
}
func (UnimplementedShopServiceServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedShopServiceServer) GetUploadURL(context.Context, *GetUploadURLRequest) (*CreateUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadURL not implemented")
}
func (UnimplementedShopServiceServer) ListAudiobooks(context.Context, *ListAudiobooksRequest) (*ListAudiobooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudiobooks not implemented")
}
func (UnimplementedShopServiceServer) GetAudiobook(context.Context, *GetAudiobookRequest) (*GetAudiobookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudiobook not implemented")
}
func (UnimplementedShopServiceServer) ViewCart(context.Context, *emptypb.Empty) (*ViewCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCart not implemented")
}
func (UnimplementedShopServiceServer) AddToCart(context.Context, *AddToCartRequest) (*ViewCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedShopServiceServer) RemoveFromCart(context.Context, *RemoveFromCartRequest) (*ViewCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedShopServiceServer) Checkout(context.Context, *emptypb.Empty) (*CheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedShopServiceServer) ListPurchases(context.Context, *emptypb.Empty) (*ListPurchasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPurchases not implemented")
}
func (UnimplementedShopServiceServer) GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedShopServiceServer) GetTranscript(context.Context, *GetTranscriptRequest) (*GetTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscript not implemented")
}
func (UnimplementedShopServiceServer) GetDescription(context.Context, *GetDescriptionRequest) (*GetDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (UnimplementedShopServiceServer) GetAudiobookStatus(context.Context, *GetAudiobookStatusRequest) (*GetAudiobookStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudiobookStatus not implemented")
}
func (UnimplementedShopServiceServer) mustEmbedUnimplementedShopServiceServer() {}
func (UnimplementedShopServiceServer) testEmbeddedByValue()                     {}

// UnsafeShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServiceServer will
// result in compilation errors.
type UnsafeShopServiceServer interface {
	mustEmbedUnimplementedShopServiceServer()
}

func RegisterShopServiceServer(s grpc.ServiceRegistrar, srv ShopServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopService_ServiceDesc, srv)
}

func _ShopService_UploadAudiobook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShopServiceServer).UploadAudiobook(&grpc.GenericServerStream[UploadChunk, UploadAudiobookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShopService_UploadAudiobookServer = grpc.ClientStreamingServer[UploadChunk, UploadAudiobookResponse]

func _ShopService_CreateUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CreateUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_CreateUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CreateUploadURL(ctx, req.(*CreateUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetUploadURL(ctx, req.(*GetUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ListAudiobooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAudiobooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ListAudiobooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ListAudiobooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ListAudiobooks(ctx, req.(*ListAudiobooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetAudiobook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudiobookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetAudiobook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetAudiobook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetAudiobook(ctx, req.(*GetAudiobookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ViewCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ViewCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ViewCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ViewCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_RemoveFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).RemoveFromCart(ctx, req.(*RemoveFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_Checkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).Checkout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ListPurchases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ListPurchases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ListPurchases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ListPurchases(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetTranscript(ctx, req.(*GetTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetDescription(ctx, req.(*GetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetAudiobookStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudiobookStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetAudiobookStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetAudiobookStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetAudiobookStatus(ctx, req.(*GetAudiobookStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopService_ServiceDesc is the grpc.ServiceDesc for ShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.v1.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUploadURL",
			Handler:    _ShopService_CreateUploadURL_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _ShopService_CompleteUpload_Handler,
		},
		{
			MethodName: "GetUploadURL",
			Handler:    _ShopService_GetUploadURL_Handler,
		},
		{
			MethodName: "ListAudiobooks",
			Handler:    _ShopService_ListAudiobooks_Handler,
		},
		{
			MethodName: "GetAudiobook",
			Handler:    _ShopService_GetAudiobook_Handler,
		},
		{
			MethodName: "ViewCart",
			Handler:    _ShopService_ViewCart_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _ShopService_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _ShopService_RemoveFromCart_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _ShopService_Checkout_Handler,
		},
		{
			MethodName: "ListPurchases",
			Handler:    _ShopService_ListPurchases_Handler,
		},
		{
			MethodName: "GetDownloadURL",
			Handler:    _ShopService_GetDownloadURL_Handler,
		},
		{
			MethodName: "GetTranscript",
			Handler:    _ShopService_GetTranscript_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _ShopService_GetDescription_Handler,
		},
		{
			MethodName: "GetAudiobookStatus",
			Handler:    _ShopService_GetAudiobookStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAudiobook",
			Handler:       _ShopService_UploadAudiobook_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "shop/v1/shop.proto",
}
