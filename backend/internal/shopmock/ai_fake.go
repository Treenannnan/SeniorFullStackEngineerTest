package shopmock

import (
	"context"
	"path/filepath"
	"regexp"
	"strings"
	"time"
)

type FakeAI struct {
	Delay   time.Duration
	Fail    bool
	TagsMax int // default 3
}

func NewFakeAI() *FakeAI { return &FakeAI{TagsMax: 3} }

func (f *FakeAI) TranscribeAndDescribe(ctx context.Context, audioPath string) (string, string, []string, error) {
	if f.Delay > 0 {
		select {
		case <-time.After(f.Delay):
		case <-ctx.Done():
			return "", "", nil, ctx.Err()
		}
	}
	if f.Fail {
		return "", "", nil, nil
	}
	base := filepath.Base(audioPath)
	name := strings.TrimSuffix(base, filepath.Ext(base))
	name = strings.ReplaceAll(name, "_", " ")
	name = regexp.MustCompile(`\s+`).ReplaceAllString(name, " ")

	tr := "Transcript of " + name + " ... (mock)"
	desc := "An engaging audiobook titled '" + name + "' generated by FakeAI."
	words := strings.Fields(strings.ToLower(name))
	tags := dedup(words)
	if f.TagsMax <= 0 {
		f.TagsMax = 3
	}
	if len(tags) > f.TagsMax {
		tags = tags[:f.TagsMax]
	}
	return tr, desc, tags, nil
}

func dedup(ss []string) []string {
	m := map[string]struct{}{}
	var out []string
	for _, s := range ss {
		if s == "" {
			continue
		}
		if _, ok := m[s]; !ok {
			m[s] = struct{}{}
			out = append(out, s)
		}
	}
	return out
}
